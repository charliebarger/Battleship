{"version":3,"sources":["helpers/helpers.js","images/explosion.png","componenets/GridWrapper.js","factories/shipfactory.js","helpers/ships.js","componenets/StyledButton.js","componenets/SetShips.js","componenets/GameSection.js","factories/player.js","factories/gameboard.js","componenets/styles/globalStyles.js","componenets/GameOver.js","componenets/Header.js","componenets/styles/theme.js","App.js","index.js"],"names":["generateRandomNumber","max","min","Math","floor","random","isObject","obj","Object","prototype","toString","call","StyledGridWrapper","styled","div","placeShips","css","theme","mediaQueries","props","player","gridRows","gridColumns","pulse","keyframes","StyledGridItem","explode","placingShips","color","sunkShip","border","SpanHeader","GridWrapper","gameboard","handleClick","ship","removeHover","cssClass","noHeader","getColor","item","getPlayer","hit","shipName","style","transform","length","className","undefined","map","row","rowIndex","columnIndex","isSunk","maxHeight","width","src","alt","onClick","onMouseEnter","onMouseLeave","shipFactory","id","shipPositions","Array","keys","x","rotate","a","Audio","play","position","every","toggleRotate","rotationStatus","getShipPositions","getFleet","name","Button","button","bigButton","StyledButton","children","handleEvent","console","log","GridLabel","h2","LabelWrapper","SetShips","StyledGameWrapper","GameSection","playerGameboard","computerGameboard","computer","setGameOver","useState","board","playerBoard","setPlayerBoard","computerBoard","setComputerBoard","fleet","selected","myShip","setMyShip","gameOver","setTimeout","checkForGameOver","updateGameboard","gameboard1","gameboard2","hitSpace","column","recieveAttack","playerAttack","autoAttack","removeShip","forEach","useEffect","some","temporary","ships","i","changeSelectedShip","filter","attack","y","enemyGameboard","flag","checkAvailability","columnStart","rowStart","shipLength","shipRotated","index","slice","startPoint","j","push","addShips","autoPlaceShips","gridLocation","bombLocation","autoPlaceAllShips","shipArray","rotateShips","getShips","GolbalStyles","createGlobalStyle","normalize","BodyWrapper","ResetWrapper","GameOver","fontSize","marginBottom","StyledHeader","header","Header","below900","below750","below650","below500","App","playerGame","computerGame","player1","makeNewGame","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa35e146.chunk.js","sourcesContent":["const generateRandomNumber = (max, min) => {\n  return Math.floor(Math.random() * (max - min) + min);\n};\n\nconst isObject = (obj) => {\n  return Object.prototype.toString.call(obj) === \"[object Object]\";\n};\n\nexport { generateRandomNumber, isObject };\n","export default __webpack_public_path__ + \"static/media/explosion.b5425618.png\";","import React from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\nimport { isObject } from \"../helpers/helpers\";\nimport explode from \"../images/explosion.png\";\n\nconst StyledGridWrapper = styled.div`\n  margin-top: 10px;\n  ${({ placeShips }) =>\n    placeShips &&\n    css`\n      @media ${({ theme }) => theme.mediaQueries[\"below650\"]} {\n        height: 350px;\n        min-width: 350px;\n        max-width: 350px;\n      }\n    `}\n  z-index:0;\n  border: 10px solid;\n  border-image-slice: 1;\n  border-width: 5px;\n  border-image-source: ${(props) =>\n    props.player === \"player\"\n      ? \"linear-gradient(to left, #743ad5, #d53a9d)\"\n      : \"linear-gradient(-45deg, red, #fae900)\"};\n  background: black;\n  height: 400px;\n  min-width: 400px;\n  max-width: 400px;\n  display: grid;\n  grid-gap: 2px;\n  grid-template:\n    repeat(${(props) => props.gridRows}, 1fr) /\n    repeat(${(props) => props.gridColumns}, 1fr);\n  ${({ placeShips }) =>\n    !placeShips &&\n    css`\n      @media ${({ theme }) => theme.mediaQueries[\"below900\"]} {\n        height: 350px;\n        min-width: 350px;\n        max-width: 350px;\n      }\n\n      @media ${({ theme }) => theme.mediaQueries[\"below750\"]} {\n        height: 300px;\n        min-width: 300px;\n        max-width: 300px;\n      }\n\n      @media ${({ theme }) => theme.mediaQueries[\"below650\"]} {\n        height: 350px;\n        min-width: 350px;\n        max-width: 350px;\n      }\n    `}\n\n  @media ${({ theme }) => theme.mediaQueries[\"below500\"]} {\n    height: 300px;\n    min-width: 300px;\n    max-width: 300px;\n  }\n`;\n\nconst pulse = keyframes`\n  0% {\n    transform: scale(0.5);\n    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7)\n  }\n  \n  70% {\n    transform: scale(1);\n    box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);\n  }\n  100% {\n    transform: scale(.7);\n    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);\n  }\n`;\n\nconst StyledGridItem = styled.div`\n  background-image: url(${explode});\n  object-fit: contain;\n  transition: ${({ placingShips }) => (placingShips ? \"0s\" : \"1s\")};\n  position: relative;\n  z-index: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: ${({ color, sunkShip }) => (sunkShip ? \"red\" : color)};\n  ${({ border }) =>\n    border &&\n    css`\n      border: 2px solid ${border};\n    `}\n  ${({ player, color }) =>\n    player === \"computer\" &&\n    color === \"white\" &&\n    css`\n      &:hover {\n        cursor: pointer;\n        &::before {\n          content: \"\";\n          display: block;\n          position: absolute;\n          height: 70%;\n          width: 70%;\n          left: 15%;\n          top: 15%;\n          border-radius: 100px;\n          z-index: 1;\n          background: red;\n          border-radius: 50%;\n          box-shadow: 0 0 0 0 rgba(0, 0, 0, 1);\n          animation: ${pulse} 1.5s infinite;\n        }\n      }\n    `}\n`;\n\nconst SpanHeader = styled.div`\n  font-size: 28px;\n  margin-bottom: 10px;\n  font-family: \"Big Shoulders Stencil Text\", cursive;\n  color: white;\n`;\n\nconst GridWrapper = ({\n  gameboard,\n  player,\n  handleClick,\n  ship,\n  removeHover,\n  cssClass,\n  noHeader,\n}) => {\n  function getColor(item) {\n    let color;\n    let border;\n    if (isObject(item)) {\n      if (player.getPlayer() === \"player\" || item.hit) {\n        color = item.shipName.color;\n        border = item.shipName.border;\n      } else {\n        color = \"white\";\n      }\n    } else if (item === \"O\") {\n      color = \"#266691\";\n    } else {\n      color = \"white\";\n    }\n    return { color, border };\n  }\n\n  return (\n    <div\n      style={{\n        transform: player.getPlayer() === \"player\" ? \"scale(0.9)\" : \"none\",\n      }}\n    >\n      {!noHeader && (\n        <SpanHeader>\n          {player.getPlayer() === \"player\" ? \"My\" : \"Enemy\"} Board\n        </SpanHeader>\n      )}\n      <StyledGridWrapper\n        gridColumns={gameboard[0].length}\n        gridRows={gameboard.length}\n        player={player.getPlayer()}\n        placeShips={removeHover}\n        className={cssClass ? cssClass : undefined}\n      >\n        {gameboard.map((row, rowIndex) =>\n          row.map((item, columnIndex) =>\n            !(isObject(item) && item.hit) ? (\n              <StyledGridItem\n                onClick={() => {\n                  //if no ship is specified play game else place ships\n                  !ship\n                    ? handleClick(item, rowIndex, columnIndex)\n                    : handleClick(rowIndex, columnIndex, ship);\n                }}\n                onMouseEnter={\n                  //if remove hover is specified apply apply and remove ships on mouseEnter and mouseLeave\n                  removeHover\n                    ? () => handleClick(rowIndex, columnIndex, ship, true)\n                    : undefined\n                }\n                onMouseLeave={\n                  removeHover ? () => removeHover(ship, gameboard) : undefined\n                }\n                player={player.getPlayer()}\n                item={item}\n                color={getColor(item).color}\n                border={getColor(item).border}\n                placingShips={removeHover}\n              />\n            ) : (\n              <StyledGridItem\n                player={player.getPlayer()}\n                sunkShip={item.shipName.isSunk()}\n                color={getColor(item).color}\n                border={getColor(item).border}\n              >\n                <img\n                  style={{ maxHeight: \"90%\", width: \"90%\" }}\n                  src={explode}\n                  alt=\"hit\"\n                />\n              </StyledGridItem>\n            )\n          )\n        )}\n      </StyledGridWrapper>\n    </div>\n  );\n};\n\nexport default GridWrapper;\n","const shipFactory = (length, id, color, border) => {\n  const shipPositions = [...Array(length).keys()].map((x) => undefined);\n  let rotate = false;\n\n  const getShipPositions = () => shipPositions;\n\n  const toggleRotate = (rotationStatus) => {\n    rotate = !rotate;\n  };\n\n  async function play() {\n    const audio = await new Audio(\n      \"https://inception.davepedu.com/inception.mp3\"\n    );\n    audio.play();\n  }\n\n  const hit = (position) => {\n    shipPositions[position] = \"X\";\n    play();\n    return shipPositions;\n  };\n\n  const isSunk = () => shipPositions.every((item) => item === \"X\");\n\n  return {\n    color,\n    length,\n    border,\n    hit,\n    isSunk,\n    id,\n    shipPositions,\n    get rotate() {\n      return rotate;\n    },\n    toggleRotate,\n    getShipPositions,\n  };\n};\n\nexport default shipFactory;\n","import shipFactory from \"../factories/shipfactory\";\nfunction getFleet() {\n  let newFleet = [\n    { name: \"Carrier\", length: 5, color: \"#218B82\", border: \"#84efe5\" },\n    { name: \"Battleship\", length: 4, color: \"#F27348\", border: \"#ffc7b4\" },\n    { name: \"Cruiser\", length: 3, color: \"#A15D98\", border: \"#ffbff7\" },\n    { name: \"Submarine\", length: 3, color: \"#e2ad3b\", border: \"#fbe0a7\" },\n    { name: \"Destroyer\", length: 2, color: \"#8EA4C8\", border: \"#d7e6ff\" },\n  ].map((ship) => shipFactory(ship.length, ship.name, ship.color, ship.border));\n  return newFleet;\n}\n\nexport default getFleet;\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nconst Button = styled.button`\n  cursor: pointer;\n  padding: 5px 10px;\n  font-size: 22px;\n  background: transparent;\n  border-image-slice: 1;\n  border-width: 3px;\n  border-image-source: linear-gradient(-45deg, red, #fae900);\n  background-color: white;\n\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 5px 5px 15px 5px #000000;\n  }\n\n  ${({ bigButton }) =>\n    bigButton &&\n    css`\n      padding: 10px 20px;\n      font-size: 32px;\n    `}\n`;\n\nconst StyledButton = ({ children, handleEvent, bigButton }) => {\n  console.log(bigButton);\n  return (\n    <Button onClick={handleEvent} bigButton={bigButton}>\n      {children}\n    </Button>\n  );\n};\n\nexport default StyledButton;\n","import React from \"react\";\nimport GridWrapper from \"./GridWrapper\";\nimport styled from \"styled-components\";\nimport StyledButton from \"./StyledButton\";\nconst GridLabel = styled.h2`\n  color: white;\n  font-size: 32px;\n  margin: 0px;\n`;\n\nconst LabelWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 0px 20px;\n  * {\n    font-family: \"Big Shoulders Stencil Text\", cursive;\n    letter-spacing: 2.5px;\n  }\n`;\n\nconst SetShips = ({ gameboard, player, handleClick, ship, removeHover }) => {\n  return (\n    <div>\n      <LabelWrapper>\n        <GridLabel>My Fleet</GridLabel>\n        <StyledButton handleEvent={ship.toggleRotate}>Rotate</StyledButton>\n      </LabelWrapper>\n      <GridWrapper\n        gameboard={gameboard}\n        player={player}\n        handleClick={handleClick}\n        ship={ship}\n        removeHover={removeHover}\n        noHeader\n      />\n    </div>\n  );\n};\n\nexport default SetShips;\n","import React, { useState, useEffect } from \"react\";\nimport GridWrapper from \"./GridWrapper\";\nimport styled from \"styled-components\";\nimport isObject from \"isobject\";\nimport getFleet from \"../helpers/ships\";\nimport SetShips from \"./SetShips\";\nconst StyledGameWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  padding: 0px 20px;\n  @media ${({ theme }) => theme.mediaQueries[\"below650\"]} {\n    align-items: center;\n    flex-direction: column-reverse;\n  }\n`;\n\nconst GameSection = ({\n  playerGameboard,\n  computerGameboard,\n  player,\n  computer,\n  setGameOver,\n}) => {\n  const [playerBoard, setPlayerBoard] = useState(playerGameboard.board);\n  const [computerBoard, setComputerBoard] = useState(computerGameboard.board);\n  const fleet = getFleet();\n  fleet[0].selected = true;\n  const [myShip, setMyShip] = useState(fleet);\n\n  const gameOver = (player) => {\n    setTimeout(() => {\n      setGameOver(player.getPlayer());\n    }, 1000);\n    return true;\n  };\n\n  const checkForGameOver = () => {\n    if (computerGameboard.gameOver()) {\n      return gameOver(computer);\n    } else if (playerGameboard.gameOver()) {\n      return gameOver(player);\n    }\n    return false;\n  };\n\n  const updateGameboard = (gameboard1, gameboard2) => {\n    setComputerBoard([...gameboard1]);\n    setPlayerBoard([...gameboard2]);\n  };\n\n  const computerAttack = () => {\n    computer.autoAttack(playerGameboard);\n    updateGameboard(computerGameboard.board, playerGameboard.board);\n    checkForGameOver();\n  };\n\n  const playerAttack = (row, column) => {\n    computerGameboard.recieveAttack(row, column);\n    updateGameboard(computerGameboard.board, playerGameboard.board);\n    return checkForGameOver();\n  };\n\n  const hitSpace = (row, column) => {\n    if (checkForGameOver()) {\n      return;\n    } else if (!playerAttack(row, column)) {\n      computerAttack();\n    }\n  };\n\n  const changeSelectedShip = (ships) => {\n    for (let i = 0; i < ships.length; i++) {\n      if (ships[i].selected) {\n        ships[i].selected = false;\n        if (ships.length - 1 !== i) {\n          let position = i + 1;\n          ships[position].selected = true;\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n    setMyShip([...ships]);\n  };\n\n  const handlePlaceShips = (row, column, ship, temporary) => {\n    if (!temporary) {\n      removeShip(ship);\n      if (playerGameboard.placeShips(row, column, ship)) {\n        let changeSelected = myShip;\n        changeSelectedShip(changeSelected);\n      }\n    } else if (playerGameboard.placeShips(row, column, ship)) {\n      setPlayerBoard([...playerGameboard.board]);\n    }\n  };\n\n  const removeShip = (ship) => {\n    playerGameboard.board.forEach((item, column) =>\n      item.forEach((item, row) => {\n        if (isObject(item) && item.shipName.id === ship.id) {\n          playerGameboard.board[column][row] = undefined;\n        }\n      })\n    );\n    setPlayerBoard([...playerGameboard.board]);\n  };\n\n  const handleClickAttack = (item, row, column) => {\n    return !item || (isObject(item) && !item.hit)\n      ? hitSpace(row, column)\n      : false;\n  };\n\n  useEffect(() => {\n    updateGameboard(computerGameboard.board, playerGameboard.board);\n  }, [setComputerBoard, computerGameboard, setPlayerBoard, playerGameboard]);\n\n  return (\n    <StyledGameWrapper>\n      {myShip.some((ship) => ship.selected) ? (\n        <SetShips\n          gameboard={playerBoard}\n          player={player}\n          handleClick={handlePlaceShips}\n          ship={myShip.filter((ship) => ship.selected)[0]}\n          removeHover={removeShip}\n        />\n      ) : (\n        <>\n          <GridWrapper\n            cssClass=\"shrinkMe\"\n            player={player}\n            gameboard={playerBoard}\n            handleClick={() => {}}\n          />\n          <GridWrapper\n            player={computer}\n            gameboard={computerBoard}\n            handleClick={handleClickAttack}\n          />\n        </>\n      )}\n    </StyledGameWrapper>\n  );\n};\n\nexport default GameSection;\n","import { generateRandomNumber } from \"../helpers/helpers\";\nimport fleet from \"../helpers/ships\";\nconst player = (player) => {\n  const getPlayer = () => player;\n  const getFleet = () => fleet;\n  const attack = (x, y, enemyGameboard) => enemyGameboard.recieveAttack(x, y);\n\n  const autoAttack = (enemyGameboard) => {\n    let flag;\n    while (!flag) {\n      flag = attack(\n        generateRandomNumber(0, 10),\n        generateRandomNumber(0, 10),\n        enemyGameboard\n      );\n    }\n  };\n  return { getPlayer, getFleet, attack, autoAttack };\n};\n\nexport default player;\n","import { generateRandomNumber, isObject } from \"../helpers/helpers\";\nconst gameboard = () => {\n  let board = [...Array(10).keys()].map((x) =>\n    [...Array(10).keys()].map((x) => undefined)\n  );\n\n  let ships = [];\n\n  let getShips = () => ships;\n  const gameOver = () => ships.every((ship) => ship.isSunk() === true);\n\n  const addShips = (ship) => {\n    ships.push(ship);\n  };\n\n  const checkAvailability = (\n    columnStart,\n    rowStart,\n    shipLength,\n    shipRotated\n  ) => {\n    if (!shipRotated) {\n      return (\n        board[columnStart]\n          .slice(rowStart, rowStart + shipLength)\n          .every((item) => item === undefined) && rowStart + shipLength - 1 < 10\n      );\n    } else {\n      return (\n        board\n          .filter(\n            (item, index) =>\n              index >= columnStart && index < columnStart + shipLength\n          )\n          .every((item) => item[rowStart] === undefined) &&\n        columnStart + shipLength - 1 < 10\n      );\n    }\n  };\n\n  const placeShips = (columnStart, rowStart, ship) => {\n    if (checkAvailability(columnStart, rowStart, ship.length, ship.rotate)) {\n      let startPoint = ship.rotate ? columnStart : rowStart;\n      for (let i = startPoint, j = 0; i < startPoint + ship.length; i++, j++) {\n        ship.rotate\n          ? (board[i][rowStart] = { shipName: ship, position: j, hit: false })\n          : (board[columnStart][i] = {\n              shipName: ship,\n              position: j,\n              hit: false,\n            });\n      }\n      addShips(ship);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const autoPlaceShips = (ship) => {\n    let flag;\n    while (!flag) {\n      flag = placeShips(\n        generateRandomNumber(0, 9),\n        generateRandomNumber(0, 9),\n        ship\n      );\n    }\n    return true;\n  };\n\n  const rotateShips = (shipArray) => {\n    for (let i = 0; i < shipArray.length; i++) {\n      if (Math.floor(Math.random() * 2) + 1 === 2) {\n        shipArray[i].toggleRotate();\n      }\n    }\n  };\n\n  const autoPlaceAllShips = (shipArray) => {\n    rotateShips(shipArray);\n    shipArray.forEach((ship) => autoPlaceShips(ship));\n  };\n\n  const checkBombAvailability = (gridLocation) => {\n    return (\n      gridLocation === undefined ||\n      (isObject(gridLocation) && gridLocation.hit === false)\n    );\n  };\n\n  const recieveAttack = (column, row) => {\n    const bombLocation = board[column][row];\n    if (checkBombAvailability(bombLocation)) {\n      if (bombLocation === undefined) {\n        board[column][row] = \"O\";\n      } else {\n        bombLocation.hit = true;\n        bombLocation.shipName.hit(bombLocation.position);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  return {\n    board,\n    placeShips,\n    recieveAttack,\n    ships,\n    gameOver,\n    checkAvailability,\n    autoPlaceShips,\n    autoPlaceAllShips,\n    getShips,\n  };\n};\n\nexport default gameboard;\n","import { createGlobalStyle } from \"styled-components\";\nimport { normalize } from \"styled-normalize\";\n\nconst GolbalStyles = createGlobalStyle`\n${normalize}\nhtml {\n    box-sizing: border-box;\n}\n*,\n*:before,\n*:after {\n    box-sizing: inherit;\n}\nbody{\n    min-height: 100vh;\n    background-color:#848482;\n}\n`;\n\nexport default GolbalStyles;\n","import React from \"react\";\nimport StyledButton from \"./StyledButton\";\nimport styled from \"styled-components\";\n\nconst BodyWrapper = styled.div`\n  font-size: 55px;\n  margin-bottom: 40px;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ResetWrapper = styled.div`\n  font-family: \"Big Shoulders Stencil Text\", cursive;\n  box-shadow: 5px 5px 15px 5px #000000;\n  height: 300px;\n  width: 400px;\n  background: white;\n  border: #266691 solid 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border-radius: 10px;\n  transition: 0.25s;\n\n  @media ${({ theme }) => theme.mediaQueries[\"below500\"]} {\n    height: 225px;\n    width: 300px;\n  }\n\n  * {\n    font-size: 20px;\n  }\n`;\n\nconst GameOver = ({ handleClick, player }) => {\n  return (\n    <BodyWrapper>\n      <ResetWrapper>\n        <span style={{ fontSize: \"55px\", marginBottom: \"40px\" }}>\n          {player === \"player\" ? \"You Lost\" : \"You Won\"}!\n        </span>\n        <StyledButton bigButton={true} handleEvent={() => handleClick(false)}>\n          Play Again\n        </StyledButton>\n      </ResetWrapper>\n    </BodyWrapper>\n  );\n};\n\nexport default GameOver;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledHeader = styled.header`\n  height: 100px;\n  background: white;\n  margin-bottom: 40px;\n  background: #266691;\n  background: radial-gradient(\n    circle,\n    rgba(38, 102, 145, 1) 41%,\n    rgba(14, 160, 190, 1) 100%\n  );\n  box-shadow: 5px 5px 15px 5px #000000;\n  color: white;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 60px;\n  font-family: \"Big Shoulders Stencil Text\", cursive;\n  letter-spacing: 5px;\n`;\n\nconst Header = () => {\n  return <StyledHeader>BATTLESHIP</StyledHeader>;\n};\n\nexport default Header;\n","const theme = {\n  mediaQueries: {\n    below900: \"only screen and (max-width: 900px)\",\n    below750: \"only screen and (max-width: 750px)\",\n    below650: \"only screen and (max-width: 650px)\",\n    below500: \"only screen and (max-width: 500px)\",\n  },\n};\n\nexport default theme;\n","import GameSection from \"./componenets/GameSection\";\nimport player from \"./factories/player\";\nimport gameboard from \"./factories/gameboard\";\nimport GolbalStyles from \"./componenets/styles/globalStyles\";\nimport getFleet from \"./helpers/ships\";\nimport { useState } from \"react\";\nimport GameOver from \"./componenets/GameOver\";\nimport Header from \"./componenets/Header\";\nimport { ThemeProvider } from \"styled-components\";\nimport theme from \"./componenets/styles/theme\";\nconsole.log(theme);\nfunction App() {\n  const [gameOver, setGameOver] = useState(false);\n\n  const makeNewGame = () => {\n    const playerGame = gameboard();\n    const computerGame = gameboard();\n    const player1 = player(\"player\");\n    const computer = player(\"computer\");\n    computerGame.autoPlaceAllShips(getFleet());\n    return { playerGame, computerGame, player1, computer };\n  };\n  const { playerGame, computerGame, player1, computer } = makeNewGame();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GolbalStyles />\n      <Header />\n      {!gameOver ? (\n        <GameSection\n          computer={computer}\n          player={player1}\n          playerGameboard={playerGame}\n          computerGameboard={computerGame}\n          setGameOver={setGameOver}\n          gameOver={gameOver}\n        />\n      ) : (\n        <div style={{ height: \"calc(100vh - 140px)\" }}>\n          <GameOver handleClick={setGameOver} player={gameOver} />\n        </div>\n      )}\n    </ThemeProvider>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}